name: Workflow for Codecov
on: [push]
jobs:
  run:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        sdk: [stable, beta, 2.16.2]
    env:
      OS: ${{ matrix.os }}
      DART_SDK: ${{ matrix.sdk }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.sdk }}

      - name: Cache packages
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.PUB_CACHE }}
            .dart_tool
            pubspec.lock
            .cert
          key: caches-${{ matrix.os }}-${{ matrix.sdk }}

      - name: Create self-signed certificate for testing
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p .cert
          cd .cert
          openssl genrsa -out test.key 2048
          openssl req -out test.csr -key test.key -new << EOF
          JP
          Tokyo
          Example Town
          Example Company
          Example Section
          localhost
          test@localhost.com


          EOF
          openssl x509 -req -days 3650 -signkey test.key -in test.csr -out test.crt

      - name: Install dependencies
        run: dart pub get

      - name: Check formatting
        run: dart format --set-exit-if-changed .

      - name: Analyze code
        run: dart analyze --fatal-warnings .

      - name: Run tests
        run: dart test --coverage=.coverage/

      - name: Generate coverage report
        run: dart run coverage:format_coverage --lcov --in=.coverage --out=.coverage/lcov.info --packages=.packages --report-on=lib

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,DART_SDK
          fail_ci_if_error: true
          files: ./.coverage/lcov.info
          flags: unittests
          verbose: true
